# -*- coding: utf-8 -*-
"""
Created on Sun Nov 17 10:03:19 2019

@author: luiss
"""

import sys
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from mtcnn.mtcnn import MTCNN
import cv2
from PIL import Image
import numpy as np
from PyQt5.QtCore import QThread

from matplotlib import pyplot as plt
from keras.models import load_model
from sklearn.preprocessing import Normalizer
from sklearn.svm import SVC

def paraPrueba():
        modelos2=dict()
        modelos2['dara']=[np.asarray([-0.05652031,  0.06155575, -0.03662049,  0.08763261, -0.01208272,
            0.06613554,  0.11410446, -0.11631867,  0.06279937, -0.046245  ,
            0.002993  , -0.009018  , -0.00254302, -0.02463355,  0.05495214,
            0.03596661,  0.10008965,  0.0776496 ,  0.00659307,  0.02899287,
           -0.00544763, -0.02987099, -0.03117331, -0.061934  , -0.17569073,
           -0.15899707,  0.03454335,  0.02656208, -0.14927699,  0.03379818,
           -0.00756849, -0.00681965, -0.02802615,  0.03922649,  0.04337149,
           -0.10660465,  0.05152041, -0.07355394,  0.20959982, -0.15374042,
            0.01735651, -0.00815658, -0.10332033, -0.07376701,  0.00665332,
           -0.00285645, -0.00228292, -0.15167353, -0.0434665 ,  0.15964502,
           -0.11605181, -0.03474011, -0.06883448,  0.04405405,  0.10497156,
            0.11780177, -0.06480394,  0.00479844, -0.05696881, -0.12305292,
            0.01665731,  0.08523547,  0.18265028,  0.08340755, -0.008595  ,
            0.20472537, -0.00146082,  0.04850294, -0.02972536,  0.07723434,
            0.010947  ,  0.05133502,  0.16980343, -0.08134103, -0.07157228,
            0.06250691, -0.12744623, -0.10924154,  0.00472881,  0.02898772,
           -0.05307163, -0.00782555,  0.02410777,  0.13200526,  0.11536135,
           -0.05011218,  0.09107582, -0.01485167, -0.12443212, -0.04775395,
            0.06532548,  0.01704835, -0.09728481,  0.06398685, -0.06195328,
           -0.10017247,  0.01559538,  0.03078855, -0.13324231, -0.00143219,
           -0.12417293,  0.22119336, -0.02757166,  0.04533134,  0.1600425 ,
           -0.00134454, -0.00655633, -0.02512626, -0.11075085,  0.02802374,
            0.06948869,  0.04121448,  0.03102785,  0.04465152, -0.2277206 ,
            0.06091592, -0.0455955 ,  0.08557587, -0.08634998, -0.00062092,
           -0.09945364,  0.16941524,  0.27815035, -0.07589681, -0.07141805,
           -0.06164462, -0.01528175, -0.04577856]),np.asarray([-6.51500076e-02, -5.32740802e-02, -6.69719353e-02,  3.14742140e-02,
           -2.46056095e-02, -6.42585382e-02,  5.91101199e-02, -8.75751823e-02,
            2.71136612e-02, -2.11228747e-02, -2.50041112e-02, -9.43289846e-02,
           -5.54101206e-02, -9.20728687e-03,  1.97114446e-03,  2.86706891e-02,
            9.06672701e-02,  1.76130682e-02, -4.04715762e-02, -2.62143631e-02,
           -3.14707011e-02, -7.49427453e-03, -9.52380151e-02, -4.34382744e-02,
           -1.92034766e-01, -1.33092344e-01,  2.95742862e-02,  1.92167591e-02,
           -8.48456249e-02,  1.01475179e-01,  8.87705758e-03,  4.90099862e-02,
            3.84329446e-02,  2.40316465e-02, -1.47022847e-02, -9.42278728e-02,
            7.07161650e-02,  1.21047366e-02,  1.90036729e-01, -1.18889600e-01,
            8.28051660e-03,  1.15887672e-02, -1.11077398e-01, -3.97610590e-02,
           -1.15741394e-01, -2.75242850e-02, -6.89652562e-02, -1.04260676e-01,
           -6.07565232e-02,  9.17836279e-02,  4.39967308e-03, -8.73130783e-02,
           -1.00953631e-01, -6.68682083e-02,  6.34245500e-02,  1.23059295e-01,
            2.97470223e-02,  2.23340672e-02, -1.10351034e-01, -1.80880323e-01,
           -8.86654630e-02,  5.54804131e-02, -3.16953510e-02,  2.41828322e-01,
            3.67856063e-02,  1.96804792e-01,  1.09470589e-02,  4.72583361e-02,
            2.52226423e-02,  4.10376560e-05,  3.37387398e-02, -7.63004087e-03,
            1.64895743e-01, -9.85330716e-02,  4.28014137e-02,  1.43715933e-01,
           -1.12296306e-01, -7.73120970e-02, -9.89174396e-02, -1.53650343e-02,
           -1.03483617e-01,  5.51655255e-02, -8.61291401e-03,  1.15554340e-01,
            9.72282216e-02, -8.38729441e-02,  4.45434898e-02,  4.20817807e-02,
           -2.63864994e-01,  6.10053428e-02,  1.31063670e-01, -5.90752484e-03,
           -8.95091146e-02,  8.09281692e-02, -7.31166750e-02, -1.12146139e-01,
            5.76402582e-02,  6.49642795e-02, -1.11787915e-01, -9.56508294e-02,
           -1.58813193e-01,  1.51538715e-01, -3.75982150e-02, -2.72242241e-02,
            1.12852409e-01, -6.72899932e-02,  6.48306087e-02, -7.50379041e-02,
           -4.31729518e-02, -1.38732288e-02,  7.13490099e-02,  6.49529789e-03,
           -1.34244319e-02,  7.51006454e-02, -1.51471928e-01,  6.94696903e-02,
            8.11818913e-02,  7.53262863e-02, -1.13673382e-01,  8.04660618e-02,
           -1.58611480e-02,  1.20298117e-01,  1.75215244e-01, -8.37088451e-02,
           -8.58369842e-02, -1.43035293e-01, -1.24049924e-01, -2.09451746e-03]),np.asarray(
          [-9.34726745e-02, -6.55879602e-02,  1.46915950e-02,  1.04392827e-01,
            5.05148945e-03,  4.76511642e-02,  1.85636595e-01, -7.62668028e-02,
           -1.30593879e-02,  1.93925574e-02, -4.43041064e-02, -5.07332236e-02,
           -1.20007037e-03,  2.78681964e-02, -5.11338264e-02,  6.41242117e-02,
            7.60685131e-02,  3.94453630e-02, -3.52974534e-02,  5.25056571e-02,
            4.29417677e-02,  1.96962971e-02,  1.21805398e-02, -1.36756852e-01,
           -9.00663435e-02, -1.12305798e-01,  8.26375261e-02, -3.53095569e-02,
           -6.94639832e-02,  1.95061732e-02, -1.88086834e-02,  2.04257295e-02,
            4.90833819e-02,  1.62451435e-02, -4.33135405e-02, -7.71553516e-02,
            6.63523823e-02,  4.18317085e-03,  6.87018633e-02, -2.73404092e-01,
            7.42895715e-03,  1.01850726e-01, -1.61413923e-01, -6.78248480e-02,
           -5.62256239e-02, -7.86462054e-02, -1.66596174e-02, -1.13179512e-01,
           -6.60926104e-02,  1.91782668e-01, -1.19177796e-01, -2.28634924e-02,
           -6.73690289e-02, -6.44451519e-03,  4.77269851e-02,  9.30643380e-02,
           -6.79107383e-02,  1.67729184e-02,  5.42850653e-03, -1.10665798e-01,
           -3.75523008e-02,  6.63103238e-02,  1.23564564e-01,  1.59054577e-01,
           -3.05330884e-02,  1.68432653e-01, -3.85062979e-03,  1.43603101e-01,
            4.79751378e-02,  1.57440960e-01, -5.72377928e-02,  4.63886783e-02,
            6.56303242e-02, -1.06910482e-01,  8.62025097e-03,  6.12439252e-02,
           -1.32765085e-01, -1.31183133e-01, -2.74261907e-02,  3.32163610e-02,
           -1.09868057e-01, -7.76168844e-03, -3.50073688e-02,  1.51190683e-01,
            1.42040074e-01,  4.44773771e-02,  1.55199200e-01, -3.57626788e-02,
           -1.64900392e-01,  1.18116466e-02,  5.65854907e-02,  2.89621428e-02,
           -4.03631926e-02,  5.62382005e-02, -9.41944793e-02, -1.01138256e-01,
            1.29570970e-02, -2.67141778e-02, -2.37257220e-02, -1.85784674e-03,
           -1.40213355e-01,  2.47753084e-01, -3.38731594e-02, -4.21561822e-02,
            1.72688439e-01, -4.23335703e-03, -5.52604422e-02, -6.70041367e-02,
           -1.03257790e-01,  6.05395883e-02,  4.85787392e-02,  5.01183867e-02,
            7.86308572e-03,  1.31686568e-01, -1.63214460e-01,  8.86719897e-02,
           -9.12578925e-02,  2.01173536e-02, -1.67737290e-01,  1.73895657e-02,
            3.52648050e-02,  1.22018188e-01,  1.21106423e-01, -1.11702206e-02,
           -6.02759086e-02, -1.21815339e-01, -2.40792637e-04,  4.95768264e-02]),np.asarray(
          [-0.12491443, -0.04174632, -0.04060034,  0.0571314 , -0.01621254,
           -0.03606139,  0.13626698, -0.13647293, -0.05050834,  0.02148154,
            0.03887035, -0.00716626,  0.00370141,  0.01015509,  0.07924051,
            0.08452014,  0.1406384 , -0.00830562, -0.09519114, -0.04716869,
           -0.04223503, -0.14065221,  0.01358285, -0.02859115, -0.1151442 ,
           -0.10631351,  0.16473557,  0.03755974, -0.07115537,  0.11167951,
           -0.02865726,  0.0134049 ,  0.02887973,  0.03261432,  0.02108351,
           -0.06670098,  0.0126731 ,  0.04279168,  0.1469644 , -0.15118977,
            0.01611305, -0.02749159, -0.11005646, -0.02166774,  0.03269313,
           -0.05849219,  0.03855576, -0.1052193 , -0.05581162,  0.08150066,
           -0.1662182 ,  0.02381697, -0.05143755,  0.0431122 ,  0.07691986,
            0.18015699, -0.03076071,  0.09379622,  0.02120029, -0.05925388,
           -0.02311743,  0.11199757,  0.09246317,  0.1470032 ,  0.03264063,
            0.19012144, -0.05746569,  0.08178957,  0.01419204,  0.11056075,
           -0.00773552,  0.08395629,  0.13316533,  0.00505449, -0.06777905,
            0.02937757, -0.11386529, -0.19658391,  0.00293148, -0.05691097,
           -0.06796188,  0.01248203, -0.02229839,  0.15162641,  0.13966002,
           -0.03051704,  0.12861739, -0.05443879, -0.18947892, -0.05908377,
            0.00570592,  0.02303592,  0.02013245,  0.01277444, -0.04612269,
           -0.0231278 ,  0.03531926,  0.05605997, -0.15291332, -0.02235714,
           -0.16487719,  0.14582004, -0.03793462,  0.05847261,  0.1805345 ,
            0.01250323, -0.01312649, -0.08995458, -0.04061703,  0.05221746,
            0.04745146,  0.06094673,  0.06489515,  0.04695884, -0.2113137 ,
            0.05704041, -0.04748589,  0.09654681, -0.0883531 ,  0.03684808,
            0.04879854,  0.15933663,  0.2335025 , -0.08496597, -0.11055303,
            0.01580588,  0.07833866, -0.03927594]),np.asarray([-0.07599643,  0.01712469, -0.03511546,  0.08396055, -0.00057183,
            0.04550067,  0.13573071, -0.08525852,  0.02707026, -0.02391473,
            0.00958537, -0.03162307, -0.03451305, -0.04280405,  0.04295364,
            0.01420982,  0.13173123,  0.05636129, -0.00732317,  0.02483186,
            0.06615956, -0.06455696,  0.0131795 , -0.04573389, -0.17864583,
           -0.17493603,  0.06180187, -0.03430972, -0.09508137, -0.00056204,
           -0.00835   ,  0.01722125,  0.03698415,  0.03772366,  0.04051242,
           -0.12255306,  0.08336397, -0.0887955 ,  0.12562703, -0.21670528,
           -0.02872125,  0.0093314 , -0.16069682, -0.06981222, -0.04099911,
           -0.02658695, -0.01943456, -0.12990998, -0.04326118,  0.13048294,
           -0.07618326, -0.06043803, -0.08751974,  0.04089221,  0.13365416,
            0.1498514 , -0.06194372, -0.00791737, -0.04580045, -0.12539887,
           -0.03108357,  0.07631382,  0.20014454,  0.08861578, -0.03296876,
            0.2202369 ,  0.01651802,  0.10023018, -0.01815636,  0.12014082,
           -0.02091182,  0.04877586,  0.12471161, -0.09023723, -0.04518034,
            0.06484429, -0.14704014, -0.12586746, -0.06091386,  0.00092546,
           -0.10058761,  0.03784373, -0.04250883,  0.08454739,  0.11602236,
           -0.01096007,  0.05364278, -0.05081295, -0.11174313, -0.04082869,
            0.06158304,  0.02240604, -0.09139674,  0.07983075, -0.07613991,
           -0.10906219,  0.04946918,  0.0056022 , -0.06324859,  0.01475099,
           -0.15112759,  0.18288983, -0.00336616,  0.07118222,  0.20054941,
           -0.01803113, -0.00617044, -0.03283717, -0.07504868,  0.0580187 ,
            0.00604243,  0.01319136,  0.02441597,  0.04030592, -0.25377452,
            0.05038852, -0.04896653,  0.02969003, -0.11532882, -0.00839872,
           -0.08072965,  0.15367731,  0.22369492, -0.08349279, -0.06926624,
           -0.02336626, -0.03542035, -0.03569282])]
          
          
        modelos2['gema']=[np.asarray([ 0.01602309, -0.14863963, -0.10306493,  0.03209178, -0.00299494,
           -0.00675053, -0.09811546, -0.2807811 , -0.08925764,  0.16534807,
           -0.03849204,  0.09716694, -0.00205897,  0.06634406,  0.01903423,
            0.00267708,  0.05268468,  0.0173965 ,  0.16868047,  0.08465867,
            0.05174807, -0.12555845, -0.01786254,  0.00964243,  0.01047444,
           -0.0297532 , -0.02576984, -0.07372139,  0.11230007,  0.06436762,
            0.01765643, -0.03531685, -0.20040622,  0.06166158, -0.03716047,
            0.04179516, -0.01996108,  0.05140481,  0.06867824, -0.12931655,
            0.13966087,  0.09196403,  0.05990867,  0.14681627, -0.06911461,
           -0.07533101, -0.01320509,  0.03259101, -0.07242927,  0.08658682,
           -0.15041587,  0.04217296, -0.04135233,  0.02585761, -0.03154748,
            0.06906372,  0.07520378,  0.03337022,  0.12098432,  0.09626652,
            0.09312563,  0.02725971,  0.04318035,  0.07197157, -0.0340494 ,
            0.13533917,  0.04233924, -0.03744047, -0.0496546 ,  0.05615374,
           -0.03648227,  0.06930062, -0.02597935,  0.07521602,  0.03444307,
            0.00651112,  0.05016493, -0.16583547, -0.10297038, -0.08309269,
           -0.127934  , -0.00476154, -0.00655505,  0.15342008,  0.02682273,
           -0.13026296, -0.06543328,  0.00660807, -0.02180378, -0.13208418,
           -0.03499247, -0.06325728,  0.03678169,  0.07249493,  0.09587151,
           -0.1260794 ,  0.07032815, -0.0204412 , -0.02733927, -0.09679071,
            0.05897889,  0.0174798 , -0.03681628, -0.01236916,  0.11642755,
           -0.01936752,  0.08801802, -0.02424396,  0.04493793, -0.17017291,
            0.2080788 ,  0.0347033 ,  0.07720444,  0.06249256, -0.02242585,
           -0.07423743,  0.02866597,  0.17856064, -0.1191623 ,  0.20429088,
            0.10402532,  0.10941382,  0.13281257, -0.12833147, -0.06585409,
           -0.00815705,  0.13229297, -0.08088201]),np.asarray( [ 0.1473009 , -0.12961474, -0.08747333, -0.08517195, -0.20561828,
           -0.01820232, -0.1150703 , -0.18687974, -0.19522747,  0.22114554,
           -0.04137169, -0.04353386, -0.07713284,  0.09711205,  0.00555373,
            0.01626471,  0.04306988, -0.07690866,  0.16180901,  0.13196614,
            0.03814721, -0.10354929,  0.03631721,  0.04741465,  0.12170311,
           -0.05845467, -0.02718697, -0.06879429,  0.1694345 , -0.01486582,
            0.05705927,  0.02517703, -0.02903827,  0.00344457, -0.09690182,
           -0.00604615, -0.05195653,  0.06570343,  0.12737007, -0.13297568,
           -0.01011441,  0.08157014,  0.00811393,  0.0499824 , -0.00603659,
           -0.07837787, -0.11028726,  0.15037943, -0.1437604 ,  0.01158194,
           -0.03636482,  0.02147793, -0.03183318,  0.04757264, -0.11311119,
            0.0624524 ,  0.07610349,  0.06587496,  0.04095206,  0.0561433 ,
            0.12421057,  0.03895389, -0.05747586,  0.13681795, -0.03250644,
            0.02837529,  0.12194119, -0.13150814, -0.01826427, -0.0095936 ,
           -0.13827245, -0.0133597 ,  0.00785087, -0.01718425,  0.06526861,
           -0.00275204,  0.02741907, -0.14239518, -0.0068881 , -0.12083162,
           -0.01874477,  0.03205641, -0.06705043,  0.0947031 ,  0.08535213,
           -0.19035213, -0.07056348, -0.10032531, -0.00323044, -0.11688156,
           -0.01695195, -0.02182437,  0.02484656,  0.1321694 ,  0.091701  ,
           -0.08046561,  0.03542438, -0.04412777, -0.09787334, -0.16314031,
            0.04826359,  0.00868548,  0.03783594, -0.01064587,  0.0678951 ,
           -0.04389947,  0.05215454,  0.01583093,  0.0340318 , -0.13009238,
            0.0756287 ,  0.04600802,  0.02206288,  0.01749689, -0.0661576 ,
           -0.02773001,  0.00932741,  0.1180502 , -0.19321868,  0.19534285,
            0.10448551,  0.06665593,  0.03423502,  0.02352086,  0.0694432 ,
           -0.08454089,  0.05881408, -0.07951049]),np.asarray([ 0.06740002, -0.0873367 , -0.04339955, -0.01438879, -0.09562387,
            0.05329602, -0.13462281, -0.27137825, -0.11160392,  0.14169195,
           -0.10300125,  0.02303734, -0.01770928,  0.07619993, -0.05646749,
           -0.00918272, -0.01157256, -0.02270984,  0.17517224,  0.08476512,
            0.03676732, -0.11816348,  0.06655757, -0.04846046,  0.01419259,
           -0.10095227, -0.02903755, -0.05803725,  0.06995989,  0.07056368,
           -0.05901639, -0.10118233, -0.1399179 ,  0.10629793, -0.09881137,
            0.01794714,  0.03690119, -0.00741197,  0.06754196, -0.14518939,
            0.11058035, -0.00252451, -0.0201811 ,  0.1295988 ,  0.03150459,
           -0.10457493, -0.09145759,  0.15501127, -0.04286127, -0.01063943,
           -0.1289617 ,  0.04088852, -0.08290923,  0.06345709, -0.11393958,
            0.08575723,  0.08209521, -0.03941342,  0.063812  ,  0.1078649 ,
            0.06545224,  0.06606682,  0.02962258,  0.09962256, -0.11755141,
            0.18513225,  0.05052098, -0.08938906, -0.02542852,  0.00566667,
           -0.079593  ,  0.04650922,  0.00335703,  0.03955791,  0.08542424,
            0.03562653, -0.00314723, -0.15120092,  0.0081342 , -0.10790211,
           -0.08457492,  0.0434831 , -0.01461424,  0.1620316 ,  0.12622723,
           -0.1780302 , -0.0576506 ,  0.02090766, -0.00593783, -0.06053472,
           -0.0614034 , -0.04340219,  0.11993004,  0.10510737,  0.07291479,
           -0.07393614,  0.07785361, -0.0195017 , -0.08857039, -0.07304565,
            0.12487795, -0.05420207, -0.01735694,  0.06967013,  0.07706215,
            0.0246345 ,  0.01995456, -0.00202712, -0.0543698 , -0.1544545 ,
            0.18968754,  0.0092864 , -0.02064289,  0.02982079, -0.04109986,
           -0.03535873, -0.00343182,  0.14315355, -0.16074552,  0.17207225,
            0.14740379,  0.07569116,  0.06005266, -0.053023  , -0.03798014,
           -0.04235382,  0.13002396, -0.03197654]),np.asarray([ 0.02574955, -0.07370408, -0.08291527, -0.02077824, -0.07946431,
           -0.02716081, -0.057736  , -0.22191602, -0.14429814,  0.13274832,
            0.07465411,  0.05467214,  0.01803764,  0.08118933,  0.03728004,
           -0.07471408,  0.14396332, -0.08979694,  0.11746051,  0.20124027,
            0.03023529, -0.19122647,  0.0303199 , -0.03445902,  0.06492089,
            0.04792489,  0.02463843,  0.00755407,  0.10828289, -0.0688576 ,
            0.06980897,  0.0163552 , -0.05373817, -0.03607724, -0.03394055,
            0.02214117, -0.02946479,  0.03376915,  0.128736  , -0.12540969,
           -0.06338686,  0.14234143,  0.03811523,  0.07532796, -0.0205353 ,
           -0.16690782, -0.09253018,  0.06594154, -0.01182618,  0.0778185 ,
            0.00808991,  0.06233415, -0.06100089, -0.00711624, -0.06068308,
            0.09845315,  0.09103939,  0.05074099,  0.11813086,  0.1603498 ,
            0.13614655,  0.06337184,  0.08041263,  0.03541888, -0.06035765,
            0.04166265,  0.0099104 , -0.01253113,  0.00963755,  0.14151624,
           -0.18746634, -0.00315015, -0.0474212 , -0.07911281,  0.07508148,
            0.023392  ,  0.06550872, -0.2678819 , -0.0870236 , -0.12952574,
           -0.01843877,  0.11462251, -0.01213527,  0.09367482, -0.0048682 ,
           -0.0387486 , -0.05515354, -0.04806556, -0.01774622, -0.15182906,
           -0.08353374, -0.06549195,  0.01537249,  0.02268084,  0.06403942,
           -0.07089033, -0.02603825, -0.09714136, -0.06049057, -0.07910492,
            0.07952226,  0.01531986,  0.03342567, -0.01538709,  0.13187316,
           -0.0463673 ,  0.09905807, -0.00168505,  0.09030624, -0.14942013,
            0.11242938,  0.00545454, -0.01457066,  0.08825461,  0.00059519,
           -0.02779034, -0.04797877,  0.14943257, -0.04439583,  0.18296868,
            0.14324299,  0.05565916,  0.1121214 , -0.06026253,  0.04777849,
           -0.09775167,  0.1484908 , -0.03129119]),np.asarray( [ 0.00768507, -0.10351468, -0.09519114,  0.02761846, -0.06651904,
           -0.00317817, -0.0814302 , -0.27395815, -0.13805163,  0.09725199,
           -0.04028929,  0.00922171,  0.0284704 ,  0.06146274,  0.04285367,
           -0.02564914,  0.04572478, -0.03384973,  0.17274728,  0.14439884,
            0.0095779 , -0.15545602,  0.06663025, -0.01442147, -0.01680291,
           -0.09057868, -0.06238799, -0.031955  ,  0.06806977,  0.01645339,
            0.06699175, -0.14888437, -0.04495914, -0.00810947, -0.02921185,
            0.05043499,  0.04284425,  0.04060889,  0.08213579, -0.11372942,
            0.06913866,  0.10364459, -0.02199772,  0.06665195,  0.0456741 ,
           -0.10156085, -0.09691876,  0.14859685, -0.02919454,  0.02939186,
           -0.10152384,  0.0043315 , -0.07202848,  0.00893623, -0.09982397,
            0.1406287 ,  0.1143131 ,  0.1268135 ,  0.08047576,  0.03701536,
            0.09308752,  0.10340612,  0.01368728,  0.09834338, -0.18493706,
            0.12341902,  0.07037732, -0.07875369,  0.03691682,  0.02287428,
           -0.07228761, -0.01367487, -0.04804351, -0.01826533, -0.03989211,
            0.02489936, -0.01866048, -0.1720953 , -0.07108324, -0.1322721 ,
           -0.05598213,  0.01665067,  0.01366207,  0.1127684 ,  0.07055215,
           -0.15005086,  0.02462016,  0.09562917, -0.05814214, -0.13092194,
           -0.05275717, -0.06625707,  0.08511983,  0.15801668, -0.00305653,
           -0.11747243,  0.04281594, -0.10450885, -0.06822461,  0.01770093,
            0.03238425,  0.08688878,  0.05020763, -0.00295294,  0.12094827,
           -0.07097552,  0.11807185, -0.02373959,  0.02234181, -0.13768753,
            0.09622083,  0.01743408, -0.00399484,  0.05915425, -0.1241416 ,
            0.00256608,  0.05559202,  0.14408895, -0.16408244,  0.17013511,
            0.07866134,  0.14947577,  0.11491434, -0.11970956,  0.04149144,
           -0.07185026,  0.11010425, -0.06037404]),np.asarray([ 0.0079903 , -0.12762603, -0.05816329,  0.07670746, -0.00606684,
           -0.01732633,  0.04649175, -0.18334106, -0.14815626,  0.15393703,
            0.01451254,  0.06535334, -0.00284466, -0.05873358, -0.00710361,
            0.05909075,  0.10311386,  0.00583439,  0.11312862,  0.156264  ,
           -0.05260444, -0.01416281,  0.02703551,  0.02499496, -0.01397629,
            0.03230669,  0.12796861, -0.06225018,  0.08270182,  0.07321391,
           -0.01538312, -0.09474295, -0.11492131, -0.00350052, -0.01216741,
            0.02243496,  0.07894515,  0.05031134,  0.08086818, -0.12797764,
            0.12270603,  0.01950331, -0.01433329,  0.06715237,  0.00113347,
           -0.07520612,  0.04132539, -0.01589483, -0.10286537,  0.08343566,
           -0.14539033,  0.10725136,  0.03093523, -0.00075441, -0.02097099,
            0.06326311,  0.03459331,  0.18248601,  0.06986211, -0.07441058,
            0.09102781, -0.06007025,  0.10675669,  0.10003361, -0.06130396,
            0.2594519 ,  0.07648858,  0.02697597, -0.01838345,  0.09145366,
            0.04188476, -0.01237049,  0.03648011,  0.14196053, -0.02595242,
            0.01373139, -0.01527997, -0.06757891,  0.00412195, -0.01878189,
           -0.1821463 ,  0.03762206,  0.00985108,  0.18444946,  0.11590723,
           -0.04121975,  0.04611353, -0.01248314, -0.08358088, -0.06144875,
           -0.1137134 , -0.04965077,  0.09313954,  0.13786134,  0.02229128,
           -0.22624898,  0.10869729, -0.00333265, -0.0954309 , -0.05922138,
           -0.03709331,  0.10578989,  0.03677249,  0.0918113 ,  0.03233521,
            0.08266696,  0.06384747, -0.00649102, -0.04353034, -0.02432894,
            0.12056904,  0.17139602,  0.2445052 ,  0.02567486, -0.06071889,
            0.00704129, -0.09785256,  0.0785137 , -0.05326093,  0.07544143,
            0.08935082,  0.1281262 ,  0.05687093, -0.12473562, -0.08785246,
            0.04803122,  0.14926752, -0.04848986]),np.asarray( [-0.06825408, -0.16574806,  0.03068666, -0.10882804, -0.09840631,
            0.01977424, -0.01219111, -0.04660872,  0.12160434, -0.13950333,
            0.03191077,  0.01356937,  0.03434682,  0.05021958,  0.00267028,
            0.05750638,  0.10229138,  0.00368807,  0.15810633,  0.14468484,
           -0.00565812, -0.01451179, -0.10076631, -0.03110038,  0.05181871,
           -0.03304802, -0.03876584, -0.02773007,  0.08472594,  0.08479183,
           -0.01882289, -0.13074657,  0.02278684,  0.0016342 ,  0.03489433,
            0.09428761, -0.14203848,  0.06059684,  0.03792046, -0.07423957,
            0.03538569,  0.0386497 , -0.08863838, -0.00067431,  0.02992171,
           -0.13742015, -0.14728808,  0.0670929 , -0.09072047,  0.07247256,
           -0.01587568,  0.15938431,  0.05748557, -0.12047596,  0.01642668,
           -0.04941098,  0.0780757 ,  0.09399809,  0.07126125,  0.08448735,
            0.18323639,  0.08634041,  0.03225556,  0.10158385,  0.04484203,
            0.07877318,  0.12794566, -0.06306529, -0.08615483,  0.04178971,
            0.06106884, -0.10286045, -0.05815393, -0.16034655, -0.01710189,
           -0.02164882, -0.01829185, -0.12697211,  0.00474297, -0.02898597,
           -0.03814596,  0.06118488,  0.00383702, -0.0151454 ,  0.0511193 ,
           -0.1300749 , -0.04648124, -0.00068877, -0.06469885, -0.18502943,
           -0.01276821,  0.02206909, -0.06967533,  0.12601678, -0.05774083,
           -0.08408476, -0.07360382, -0.0035466 , -0.15309009,  0.07957771,
            0.2231999 ,  0.0649149 ,  0.02806919,  0.0831584 , -0.0706448 ,
            0.13816364,  0.04242687, -0.13109514, -0.03121351, -0.05329966,
            0.04095833,  0.03472324,  0.14116299, -0.00484486, -0.04481573,
           -0.16715261,  0.06111295,  0.04693381, -0.0614063 ,  0.10137455,
            0.12199997,  0.22500366,  0.08170984, -0.21097814,  0.08828087,
            0.03263642,  0.11712153, -0.07036979])]
        return modelos2

def ExtraerRostro(bbox,imgsml):
    x1, y1 = abs(bbox[0]), abs(bbox[1])
    x2, y2 = x1 + bbox[2] ,y1 + bbox[3]
    cara=imgsml[y1:y2 , x1:x2]
    #Image preprocessing
    rostromono=Image.fromarray(cara)
    rostrores=rostromono.resize((160,160))
    rostro_array=np.asarray(rostrores)
    return rostro_array

def SacarVector(model,cara):
    #Preparar imagen para el modelo
    #Escalar pixeles
    cara = cara.astype('float32')
    #Estandarizar los valores en los canales
    m, std = cara.mean(),cara.std()
    cara=(cara - m )/std
    #Convetir a una muestra
    muestra = np.expand_dims(cara, axis=0)
    #Vector de características
    res= model.predict(muestra)
    #Normalizar vector
    res=Normalizer(norm='l2').transform(res)
    return res[0]
    
    
class FaceDetect(QWidget):
     def __init__(self,wf):
        super().__init__()
        self.wf = wf
        self.saveF = 1
        self.an = 1
        self.iden = 1
        self.texto1 = QLabel()
        self.texto2 = QLabel()
        self.texto3 = QLabel()
        self.textbox = QLineEdit()
        
                
     def close(self):
        i=0
    
     def saveFace(self):
        self.texto1.setText("Saving Face...")
        self.wf.layout().addWidget(self.texto1)
        btnSaveFace.setEnabled(False)
        self.saveF = 0
    
     def Analizar(self):
        self.texto1.setText("Analyzing Face...")
        self.wf.layout().addWidget(self.texto1)
        btnAnalizar.setEnabled(False)
        self.an = 0
        
     def Identify(self):
        self.texto1.setText("Identifying Face...")
        self.wf.layout().addWidget(self.texto1)
        btnIdentify.setEnabled(False)
        self.iden = 0 
            
        
     def run(self):
        modelos2={}
        model = load_model('facenet_keras.h5')
        w=640
        h=480
        color=(0,0,0)
        analizando=False
        identificando=False
        nombre=''
        cam = cv2.VideoCapture(0)
        mirror = True
        detector = MTCNN()
        #imgVideo = QLabel()
        self.texto3.setText("Escribe el nombre de la persona a procesar:")
        self.wf.layout().addWidget(self.texto3)
        self.wf.layout().addWidget(self.textbox)
        while True:
            texto1 = QLabel()
            #imgVideo = QLabel()
            ret_val, img = cam.read()
            if mirror:
                img = cv2.flip(img, 1)
            imgsml = cv2.resize(img, (w, h))
            #TODO: Hacer que solo detecte una cara
            faces = detector.detect_faces(imgsml) 
            if len(faces) > 0:
                for k in range(len(faces)): 
                    bbox = faces[k]['box']
                    keypoints = faces[k]['keypoints']
                    imgsml = cv2.rectangle(imgsml, (bbox[0], bbox[1]), (bbox[0]+bbox[2], bbox[1]+bbox[3]), (0,255,0))
                    cv2.circle(imgsml,(keypoints['left_eye']), 2, (0,155,255), 2)
                    cv2.circle(imgsml,(keypoints['right_eye']), 2, (0,155,255), 2)
                    cv2.circle(imgsml,(keypoints['nose']), 2, (0,155,255), 2)
                    cv2.circle(imgsml,(keypoints['mouth_left']), 2, (0,155,255), 2)
                    cv2.circle(imgsml,(keypoints['mouth_right']), 2, (0,155,255), 2)
                    
            cv2.circle(imgsml,(w-20,h-20), 10, color, -1)     
            #TODO: Checar si no hay un bug (valores negativos en el bounding box)
            
                                      
           # cv2.imshow('Webcam View', imgsml)
            #texto1.setText("prueba")
            img = Image.fromarray(imgsml, 'RGB')
            img.save('my.png')
            im = QPixmap("my.png")
                
            imgVideo.setPixmap(im)
            self.wf.layout().addWidget(imgVideo)
            
            
            
            k=cv2.waitKey(1)
            modelos2=paraPrueba()
            
            if k == 27:
                break  # esc to exit
     
    # =============================================================================
    #         #Guardar un rostro
    # =============================================================================
            if self.saveF == 0: #Espacio
                rostro=list()
                modelo=list()
                if len(faces)==1: #Solo un rostro puede ser extraído a la vez
                    print('Guardando rostro')
                    if len(nombre)==0:
                        nombre= self.textbox.text()
                            
                    #------------Extraer rostro            
                    rostro_out=ExtraerRostro(bbox,imgsml)
                    #------------Agregar
                    rostro.append(rostro_out)
                    np.asarray(rostro)
                    #-----------Vector
                    modelo=SacarVector(model,rostro[0])
                    #modelo.append(res)
                    
                    if nombre in modelos2:
                        modelos2[nombre].append(modelo)
                        
                    else:
                        modelos2[nombre]=[modelo]
                            
                    print('Rostro guardado') 
                    #agregar =input('Quieres agregar más imágenes? s para si \t')
                    #if agregar != 's':
                     #   nombre=''
                   
                rostro.clear()
                #modelo.clear()
                self.texto1.setText("Saved " + self.textbox.text() + " Face.")
                self.wf.layout().addWidget(self.texto1)
                btnSaveFace.setEnabled(True)
                self.saveF = 1
                k=-1
                continue
    # =============================================================================
    #         #Analizar rostro
    # =============================================================================
            #if k==9:#Tab
             #   if not analizando:
              #      analizando=True
               # else:
                #    analizando=False
                #k=-1
            
            if self.an == 0:
                if len(modelos2)>0:  
                    if len(faces)==1: #Solo un rostro puede ser extraído a la vez
                        #------------Extraer rostro
                        rostro_out=ExtraerRostro(bbox,imgsml)
                        #-----------Vector 
                        res=SacarVector(model,rostro_out)
                        for nom in modelos2:
                            for modelo in modelos2[nom]:
                                dist = np.linalg.norm(res-modelo)
                                print(dist)
                                if dist<=0.5:
                                    #print('Rostro de ',nom)
                                    self.texto2.setText("Rostro de : " + nombre)
                                    self.wf.layout().addWidget(self.texto2)
                                    #cv2.putText(imgsml, nombre, (bbox[0], bbox[1]), cv2.FONT_HERSHEY_SIMPLEX, 2.0, (255, 255, 255), lineType=cv2.LINE_AA)   
                                    color=(0,255,0)
                                else:
                                    color=(0,0,0)
                self.texto1.setText("Analyzed " + self.textbox.text() + " Face.")
                self.wf.layout().addWidget(self.texto1)
                btnAnalizar.setEnabled(True)
                self.an = 1
    # =============================================================================
    # Identificar un rostro                  
    # =============================================================================
            #if k==43: #+
             #   if not identificando:
              #      identificando=True
               # else:
                #    identificando=False
                #k=-1
            
            if self.iden == 0:
                trainX=np.empty((len(modelos2),128))
                trainY=np.empty((len(modelos2),))
                if len(modelos2)>1: #Debe haber mínimo 2 clases 
                    if len(faces)==1: #Solo un rostro puede ser extraído a la vez
                        #------------Extraer rostro
                        rostro_out=ExtraerRostro(bbox,imgsml)
                        #-----------Vector 
                        res=SacarVector(model,rostro_out)
                        for nom in modelos2:
                                for modelo in modelos2[nom]:
                                    temp=np.append(trainX,[modelo],axis=0)
                                    trainX=np.copy(temp)
                                    temp2=np.append(trainY,[nom],axis=0)
                                    trainY=np.copy(temp2)                            
                        print(trainX.shape,trainY.shape)
                        model2 = SVC(kernel='linear', probability=True)
                        model2.fit(trainX, trainY)
                        print(res.shape)
                        pred=model2.predict([res])
                        print(pred)
                        self.text2.setText("Creo que eres: " + pred)
                self.texto1.setText("Identified " + self.textbox.text() + " Face.")
                self.wf.layout().addWidget(self.texto1)
                btnIdentify.setEnabled(True)
                self.iden = 1
                        
              
        
        cv2.destroyAllWindows()

        

if __name__ == '__main__':
    app = QApplication(sys.argv)
    
    wf = QWidget()
    wf.resize(400,300)
    wf.setWindowTitle("Reconocimiento Facial")
    
    
    txtDetection = QLabel()
    imgVideo = QLabel()
    
    aFaceDetect = FaceDetect(wf)
    
    
    btnSaveFace = QPushButton("Save Face")
    btnAnalizar = QPushButton("Analyze Face")
    btnIdentify = QPushButton("Identify Face")
    btnOpenVideoCamera = QPushButton("Open Face Video Camera")
    btnCloseFaceWindow = QPushButton("Close Face Video Camera")
    
    #im = QPixmap("my.png")
    #imgVideo.setPixmap(im)

    wf.setLayout(QVBoxLayout())
    wf.layout().addWidget(btnOpenVideoCamera)
    wf.layout().addWidget(btnSaveFace)
    wf.layout().addWidget(btnAnalizar)
    wf.layout().addWidget(btnIdentify)
    wf.layout().addWidget(btnCloseFaceWindow)
    wf.layout().addWidget(aFaceDetect)
    wf.layout().addWidget(imgVideo)

    

        
    btnOpenVideoCamera.clicked.connect(lambda: aFaceDetect.run())
    btnAnalizar.clicked.connect(lambda: aFaceDetect.Analizar())
    btnIdentify.clicked.connect(lambda: aFaceDetect.Identify())
    btnSaveFace.clicked.connect(lambda: aFaceDetect.saveFace())
    btnCloseFaceWindow.clicked.connect(lambda: aFaceDetect.close())
    
    wf.show()
    sys.exit(app.exec_())